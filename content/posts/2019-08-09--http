---
title: HTTP
date: "2019-08-09T11:11:11.121Z"
template: "post"
draft: false
slug: "/posts/http/"
category: "HTML | CSS"
tags:
  - "TIL"
  - "http"

description: "HTTP에 대해 알아보자"
---
<head>
  <style>
    code {background-color: #ececec}
    p    {font-size: 15px;}
    tr   {text-align: right;}
    sub{ font-size: 14px; vertical-align: middle; padding: 0px; line-height: 30px; color: #2680d9;}
    li {margin: 20px 0px;/* list-style: none; */}
    strong {font-size: 18px;vertical-align: middle;}
    small {color: #808080;}
    #rcorners {border-radius: 25px; border: 2px solid #dd4ecf; padding: 20px; width: 200px; height: 150px;}
    .rdimg {border-radius: 25px;}
    .rdimg2 {border-radius: 10px;}
    .dbul {border-bottom: 3px double;}
    img{margin-bottom: 10px;}
    ol, ul{line-height: 30px;}
    .alignR{text-align: left;}
    a {text-decoration: none;}
    table.tableizer-table {
      font-size: 15px;
      border: 1px solid #CCC; 
      border-collapse : collapse;
    } 
    .tableizer-table td {
      padding: 4px;
      margin: 2px;
      padding: 8px 20px;
      border: 1px solid #CCC;
      text-align : left;
      line-height : 25px;
    }
    .tableizer-table th {
      background-color: #104E8B; 
      color: #FFF;
      margin : 5px;
      padding : 15px;
      font-size: 16px;
      font-weight: bold;
      text-align : center;
    }
  </style>
</head>

<body>
  <link href="https://fonts.googleapis.com/css?family=Nanum+Gothic+Coding&display=swap" rel="stylesheet">
  <div style="font-family: 'Nanum Gothic Coding', monospace;">
  <img src="/media/http.png" alt="HTTP" class=rdimg width="300" vspace= "15">
  <small><center>
    <p style="padding-bottom: 15px; display:block; clear:both" >
  </center></small>

<body>
  <center><p>
    Protocol의 한 종류인 http에 대해 알아보자.
  </center></p>

  ### Table of Contents
  <small>링크를 클릭하면 해당 내용으로 이동합니다</small>

  + [About HTTP](#about-http) 
    <br><sub>HyperText Transfer Protocol</sub>
  + [HTTP Version](#http-version)
    <br><sub>0.9, 1.0, 1.1, 2.0, 3.0</sub>
  + [HTTP Structure](#http-structure)
    <br><sub>HTTP Request, HTTP Response</sub>
  + [HTTP의 특징](#http의-특징) 
    <br><sub>Connectionless, Stateless, Keep Alive </sub>
  + [HTTP Methods](#http-methods) 
    <br><sub>GET, POST, PUT, DELETE</sub>
  + [HTTP Status Code](#http-status-code) 
    <br><sub>1XX ~ 5XX</sub>
  + [References](#references) <sub></sub>

# About HTTP
  <p>
    <img src="/media/baby-http.png" alt="Protocol" class=rdimg2 width="450" vspace= "15">
    <b>HTTP : H</b>yper<b>T</b>ext <b>T</b>ransfer <b>P</b>rotocol<br>
    HTTP는 HyperText들의 문서들을 주고 받는데 사용되는 프로토콜이다. <br>
    HTTP가 처음 만들어 졌을 때는 HTML만을 전송하고자 하였으나 시간이 흐르면서 다른 모든 종료의 리소스들을 전송할 수 있게 되었다.
  </p>
  <p>
    <span class="dbul">HTTP의 용어를 분석해보자</span><br>
    HyperText  → 하이퍼텍스트를 기반으로<br>
    <sub>&nbsp;&nbsp;&nbsp;* <b>HyperText</b>는 한 문서가 또 다른 문서와 연결되어 있는 것을 말한다.</sub><br>
    Transfer  &nbsp;→ 데이터를 전송하는<br>
    Protocol   &nbsp;→ 통신 규약<br>
    <sub>&nbsp;&nbsp;&nbsp;* <b>protocol</b>은 컴퓨터와 컴퓨터가 정보를 주고 받을때 어떻게 소통할것인지에 대한 규칙과 약속을 뜻한다. </sub><br>
  </p>
  <p>
    <b>Protocol</b><br>
    IETF<small>(Internet Engineering Task Force)</small>는 웹브라우저와 웹서버가 서로 통신을 하기 위한 규약을 정해 놓았다. 이 규약을 HTTP라 부른다. HTTP 외에도 다양한 프로토콜이 존재한다. 파일을 전송할시 사용되는 프로토콜로는 FTP<small>(File Transfer Protocol)</small>, SFTP<small>(Secure File Transfer Protocol)</small>가 있고 이메일 전송시 사용되는 프로토콜의 종류로는 대표적으로 SMTP<small>(Simple Mail Transfer Protocol)</small>, POP3<small>(Post Office Protocol)</small>, IMAP<small>(Internet Access Message Protocol)</small>이 있다.
    <img src="/media/protocol-types.png" alt="Protocols" width="460" vspace= "15">
  </p>
  <p>
    <b>왜 통신의 규칙을 정해놓아야 했을까?</b><br>
    우리는 타인과 소통을 할 때 손을 흔들거나 악수를 한다. 사람은 비언어적 요소<small>(표정, 몸짓, 동작 등)</small>와 언어적 요소<small>(글, 말)</small>를 통하여 상대방에게 의사를 전달할 수 있다. 두 사람간에 온전한 커뮤니케이션이 이루어지기 위해서는 정해진 룰을 따라야 한다. 서로 알아들을 수 있는 언어를 사용하여야 하며 주고받는 단어의 내포된 의미를 서로 이해할 수 있어야 한다.
    <!-- 컴퓨터 또한 데이터를 주고 받을 때 어떠한 방법과 규칙을 따를 것인지를 정해 놓았다.
    <small>예) TCP/IP</small> -->
    <br><img src="/media/communi.jpg" alt="Communication" width="250" vspace="30">
    <center><small>Illustrated by. Allie Mounce</small></center><br>
  </p>
  <p>
    비언어적인 요소로 대화할 수 없는 컴퓨터는 철저히 언어적 의사소통에 의지할수밖에 없다. 소통상의 문제를 제거하고 명확한 의사소통<small>(Response & Request)</small>을 하기 위해서는 더욱 체계적이고 엄격한 규칙이 필요하다. '무엇을 어떠한 방법으로 언제 얼마만큼 어떻게 통신할 것인가'에 관한 규칙을 미리 정해두고 룰을 따름으로써 데이터를 효율적으로 전달할 수 있게 된다.<br>
    <small><ul>
      <li>통신의 기본 전송 단위는 얼마로 할 것인가?</li>
      <li>어느정도의 데이터 전송 속도를 사용할 것인가?</li>
      <li>어떤 character set을 이용할 것인가?</li>
      <li>etc</li>
    </ul></small>
  </p>
    

  [Return to the ToC](#table-of-contents) 

# HTTP Version
  <p>
    각 Version의 특징을 표를 통해 간단히 살펴보자.<br>
    <sub>* 1.1과 2.0, 그리고 3.0에 대한 차이점은 다른 포스팅에서 자세히 다룬다.</sub>
    <table class="tableizer-table">
    <thead>
    <tr class="tableizer-firstrow">
    <th>VERSION</th><th>YEAR</th><th>ABOUT</th></tr></thead>
      <tbody>
      <tr>
        <td><center><b>0.9</b></center></td>
        <td>1991</td>
        <td>* 간단한 HTML 객체를 받아오기 위해 만들어짐<br> * GET 메서드만 지원<br> * 결함이 많은 모델<br> * 헤더, 버전 번호 비지원
        </td>
      </tr>
      <tr>
        <td><center><b>1.0</b></center></td>
        <td>1996</td>
        <td>* 헤더, 다양한 메서드, 멀티미디어 객체 처리가 추가됨 </td>
      </tr>
      <tr>
        <td><center><b>1.0+</b></center></td>
        <td>&nbsp;</td>
        <td>* Keep-alive connection 추가<br> * 가상 호스팅 지원 시작</td>
      </tr>
      <tr>
        <td><center><b>1.1</b></center></td>
        <td>1997</td>
        <td>* 설계 결함 교정<br> * 잘못된 기능 제거<br> * 복잡해진 웹앱과 배포를 지원<br> * 한 연결당 하나의 요청만 처리 가능 (동시 전송 불가)</td>
      </tr>
      <tr>
        <td><center><b>2.0</b></center></td>
        <td>2015</td>
        <td>* SPDY 프로토콜 기반</td>
      </tr>
      <tr>
        <td><center><b>3.0</b></center></td>
        <td>2018</td>
        <td>* 웹페이지 로딩 속도 개선<br> * UDP 기반 프로토콜</td>
      </tr>
      </tbody>
    </table>   
  </p>

  [Return to the ToC](#table-of-contents) 

# HTTP Structure
  <p>
    <center><small><b>
      "말하기의 반대는 듣는 것이 아니다.<br>
      말하기의 반대는 기다리는 것이다." <br>
      -레보비츠-
    </b></small></center><br>
    <img src="/media/http-request-response.png" alt="HTTP Request Response" width="450">
    <center><small>Woman Illustrated by. Анна Конева</small></center><br>
  </p>
  <p>
    HTTP 통신 방식은 요청<small>(Response)</small>, 응답<small>(Request)</small>의 구조를 갖는다. 요청을 보내는 쪽을 클라이언트<small>(client)</small> 응답을 보내는 쪽을 서버<small>(server)</small>라고 지칭한다. 리소스를 가진 Sever는 24시 항시 켜진채로 Client가 요청을 보내기를 기다린다. 클라이언트가 요청한 리소스가 있다면 해당 리소스를 보내주고 없다면 오류 메세지를 보낸다.
  </p>
  <p>
    의사소통의 구성요소는 보내는사람, 받는 사람, 정보, 매체, 반응을 필요로 한다. 컴퓨터의 의사소통도 이와 같은 요소가 필요하다.<br>
    <ul>
      <li>보내는 사람 → Client</li>
      <li>받는 사람 &nbsp;&nbsp;→ Server</li>
      <li>정보 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ Response</li>
      <li>매체 &nbsp;&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;→ HTTP/HTTPS</li>
      <li>반응 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;→ Request</li>
    </ul><br>
    <img src="/media/https-req-res.png" alt="HTTP Request Response" width="600"><br>
    HTTP Request 와 Response의 구조는 똑같이 세 부분으로 나뉜다.<br>
    <ol>
      <li>Status Line</li>
      <li>Headers</li>
      <li>Body</li>
    </ol>
  </p>


## HTTP Request Structure
  <p>
    Client가 서버에게 요청을 보내는 구조에 대해 자세히 알아보자.
  </p>

  ### Request Line
  <p>
    Request line은 Method, Target, Version으로 이루어져 있다.

  </p>

  ### Headers

  ### Body


## HTTP Response Structure
  <p>
    요청을 받은 Server는 
  </p>

  ### Status Line

  ### Headers
  
  ### Body


# HTTP의 특징
  <p>
    <ol>
      <li>Connectionless</li>
      <li>Stateless</li>
      <li>Keep-alive</li>
    </ol>
  </p> 

  [Return to the ToC](#table-of-contents)


# HTTP Methods
  <p>
    HTTP Methods의 종류로는 CONNECT, DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT, TRACE가 있다. HTTP의 첫번째 버전인 0.9에서 사용가능한 메서드는 GET뿐이었다.
  </p> 

  [Return to the ToC](#table-of-contents)


# HTTP Status Code
  <p>
  </p> 

  [Return to the ToC](#table-of-contents)


# References
  <p>
    <ul>
      <li><a style="text-decoration:none" href="https://developer.mozilla.org/ko/docs/Web/HTTP" target="_blank" rel="noopener noreferrer">[MDN] HTTP</a></li>
      <li><a style="text-decoration:none" href="https://www.cse.wustl.edu/~jain/cse473-19/ftp/i_2app4.pdf" target="_blank" rel="noopener noreferrer">Application Layer</a></li>
      <li><a style="text-decoration:none" href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Evolution_of_HTTP" target="_blank" rel="noopener noreferrer">Evolution of HTTP</a></li>
      <li><a style="text-decoration:none" href="http://cs.wellesley.edu/~cs215/Lectures/L00-HistoryHypermedia/FromHypertextToWWW.html" target="_blank" rel="noopener noreferrer">From Hypertext to the World Wide Web</a></li>
      <li><a style="text-decoration:none" href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener noreferrer">HTTP</a></li>
      <li><a style="text-decoration:none" href="https://www.restapitutorial.com/httpstatuscodes.html" target="_blank" rel="noopener noreferrer">HTTP Status Codes</a></li>
      <li><a style="text-decoration:none" href="https://www.joinc.co.kr/w/Site/Network_Programing/AdvancedComm/HTTP" target="_blank" rel="noopener noreferrer">HTTP 프로토콜</a></li>
      <li><a style="text-decoration:none" href="https://ruslanspivak.com/lsbaws-part1/" target="_blank" rel="noopener noreferrer">Let’s Build A Web Server. Part 1.</a></li>
      <li><a style="text-decoration:none" href="https://tools.ietf.org/html/rfc7540" target="_blank" rel="noopener noreferrer">RFC 7540</a></li>
      <li><a style="text-decoration:none" href="https://home.cern/science/computing/birth-web" target="_blank" rel="noopener noreferrer">The birth of the Web</a></li>
      <li><a style="text-decoration:none" href="http://theteacher.info/index.php/fundamentals-of-cs/3-data-transmission/topics/2652-the-importance-of-protocols-and-standards" target="_blank" rel="noopener noreferrer">The importance of protocols and standards</a></li>
      <li><a style="text-decoration:none" href="https://www.youtube.com/watch?v=keo0dglCj7I" target="_blank" rel="noopener noreferrer">What Happens When You Click a Link?</a></li>
      <li><a style="text-decoration:none" href="https://www.techwalla.com/articles/why-are-network-protocols-needed" target="_blank" rel="noopener noreferrer">Why Are Network Protocols Needed?</a></li>
      <li><a style="text-decoration:none" href="https://www.howtogeek.com/233383/why-was-80-chosen-as-the-default-http-port-and-443-as-the-default-https-port/" target="_blank" rel="noopener noreferrer">Why was 80 Chosen as the Default HTTP Port and 443 as the Default HTTPS Port?</a></li>
      <li><a style="text-decoration:none" href="https://jhkang-tech.tistory.com/7?category=749662" target="_blank" rel="noopener noreferrer">프로토콜이란 무엇인가</a></li>
    </ul>
  </p>
         
</body>